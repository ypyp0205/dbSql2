--GROUP FUNCTION
--특정 컬럼이나, 표현을 기준으로 여러행의 값을 한행의 결과로 생성
--count-건수, sum0합계, avg-평균, max-최대값 ,min-최소값
--전체 직원을 대상으로 (14건을 -> 1건)
--가장 높은 급여


--부서번호별 그룹함수 적용
SELECT deptno,
       MAX(sal) m_sal,              --부서에서 가장 높은 급여 
       MIN(sal) min_sal,            --부서에서 가장 낮은 급여
       ROUND(AVG(sal),2) avg_sal,   --부서 직원의 급여 평균
       SUM(sal) sum_sal,            --부서 직원의 급여 합계
       COUNT(sal) count_sal,        --부서의 급여 건수(null이 아닌 값이면 1건)
       COUNT(mgr) count_mgr,        --부서 직원의 관리자 건수(KING의 경우 MGR가 없다.
       COUNT(*) count_row           --부서의 조직원수
FROM emp
GROUP BY deptno;


SELECT deptno,ename,
       MAX(sal) m_sal,              --부서에서 가장 높은 급여 
       MIN(sal) min_sal,            --부서에서 가장 낮은 급여
       ROUND(AVG(sal),2) avg_sal,   --부서 직원의 급여 평균
       SUM(sal) sum_sal,            --부서 직원의 급여 합계
       COUNT(sal) count_sal,        --부서의 급여 건수(null이 아닌 값이면 1건)
       COUNT(mgr) count_mgr,        --부서 직원의 관리자 건수(KING의 경우 MGR가 없다.
       COUNT(*) count_row           --부서의 조직원수
FROM emp
GROUP BY deptno, ename;

--SELECT 절에는 GROUP BY 절에 표현된 컬럼 이외의 컬럼이 올 수 없다.
--논리적으로 성립이 되지 않음 (여러명의 직원 정보로 한건의 데이터로 그루핑)
--단 예외적으로 상수값들은 SELECT 절에 표현이 가능
SELECT deptno,
       MAX(sal) m_sal,              --부서에서 가장 높은 급여 
       MIN(sal) min_sal,            --부서에서 가장 낮은 급여
       ROUND(AVG(sal),2) avg_sal,   --부서 직원의 급여 평균
       SUM(sal) sum_sal,            --부서 직원의 급여 합계
       COUNT(sal) count_sal,        --부서의 급여 건수(null이 아닌 값이면 1건)
       COUNT(mgr) count_mgr,        --부서 직원의 관리자 건수(KING의 경우 MGR가 없다.
       COUNT(*) count_row           --부서의 조직원수
FROM emp
GROUP BY deptno;

--그룹함수에서는 NULL 컬럼은 계산에서 제외된다.
--emp테이블에서 comm컬럼이 null이 아닌 데이터는 4건이 존재, 9건은 NUll)
SELECT COUNT(comm),   --NULL이 아닌 값의 개수 4
       SUM(comm) sum_comm,
       SUM(sal) sum_sal,--NULL값을 제외, 300 + 500 + 1400 + 0 = 2200
       SUM(sal + comm) tot_sal_sum,
       SUM(sal + NVL(comm, 0)) tot_sal_sum
FROM emp;

--WHERE 절에는 GROUP 함수를 표현 할 수 없다.
--부서별 최대 급여 구하기
--deptno, 최대급여
SELECT deptno, MAX(sal) m_sal
FROM emp
WHERE MAX(sal) > 3000  --ORA-00934 WHERE 절에는 GROUP 함수가 올 수 없다.
GROUP BY deptno;

SELECT deptno,  MAX(sal) m_sal
FROM emp
GROUP BY deptno
HAVING MAX(sal) >= 3000;

--1번
SELECT      MAX(sal) MAX_sal, 
            MIN(sal) MIN_sal,
            AVG(sal) AVG_sal,
            SUM(sal) SUM_sal,
            COUNT(sal) COUNT_sal,
            COUNT(mgr) COUNT_mgr,
            COUNT(*) COUNT_ALL
FROM emp
GROUP BY deptno;

--2번          
SELECT deptno, MAX(sal) MAX_sal, 
            MIN(sal) MIN_sal,
            AVG(sal) AVG_sal,
            SUM(sal) SUM_sal,
            COUNT(sal) COUNT_sal,
            COUNT(mgr) COUNT_mgr,
            COUNT(*) COUNT_ALL
FROM emp
GROUP BY deptno;

--3번
SELECT deptno, 
            MAX(sal) MAX_sal, 
            MIN(sal) MIN_sal,
            AVG(sal) AVG_sal,
            SUM(sal) SUM_sal,
            COUNT(sal) COUNT_sal,
            COUNT(mgr) COUNT_mgr,
            COUNT(*) COUNT_ALL
FROM emp
GROUP BY deptno;

--4번
--grp4
--hiredate 컬럼의 값을 yyyymm 형식으로 만들기
SELECT TO_CHAR(hiredate,'YYYYmm') hire_yyyymm, COUNT(*) cnt
       
FROM emp
GROUP BY TO_CHAR(hiredate,'YYYYmm');

--5번
SELECT TO_CHAR(hiredate, 'yyyy') hire_yyyy, COUNT(*) cnt
FROM emp
GROUP BY TO_CHAR(hiredate, 'yyyy');

--6번

SELECT COUNT(deptno) cnt
FROM dept;

--전체 부서수 구하기 (dept)


--7번
SELECT COUNT(COUNT(deptno)) cnt
FROM emp
GROUP BY deptno;

SELECT COUNT(DISTINCT deptno)
FROM emp;


--join
--1. 테이블 구조변경 (컬럼 추가)
--2. 추가된 컬럼에 값을 update
--dename 컬럼을 emp 테이블에 추가
DESC emp;
DESC dept;
--컬럼추가(daname, VARCHAR(14))
ALTER TABLE emp ADD (dname VARCHAR2(14));
DESC emp;
SELECT *
FROM emp;

UPDATE emp SET dname = CASE
                            WHEN deptno = 10 THEN 'ACCOUNTING'
                            WHEN deptno = 20 THEN 'RESERCH'
                            WHEN deptno = 30 THEN 'SALES'
                            END;
COMMIT;

SELECT empno, ename, deptno, dname
FROM emp;
                            
--SALES--> MARKET SALES
--총 6건의 데이터 변경이 필요하다.
--값의 중복이 있는 형태 (반 정규형)
--UPDATE emp SET dname = 'MARKET SALES'
--WHERE dname = 'SALES';


--emp 테이블, dept 테이블 조인
SELECT ename, emp.deptno, dept.dname
FROM emp, dept
WHERE emp.deptno = dept.deptno;














                            